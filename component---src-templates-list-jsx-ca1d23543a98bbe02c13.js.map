{"version":3,"sources":["webpack:///./src/templates/list.jsx","webpack:///./src/components/tags.jsx","webpack:///./src/components/card.jsx","webpack:///./src/components/posts.jsx","webpack:///./src/components/map.jsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","lodash__WEBPACK_IMPORTED_MODULE_1__","lodash__WEBPACK_IMPORTED_MODULE_1___default","grommet__WEBPACK_IMPORTED_MODULE_2__","grommet__WEBPACK_IMPORTED_MODULE_3__","_config__WEBPACK_IMPORTED_MODULE_4__","_config__WEBPACK_IMPORTED_MODULE_4___default","_components_layout__WEBPACK_IMPORTED_MODULE_5__","_components_map__WEBPACK_IMPORTED_MODULE_6__","_components_section__WEBPACK_IMPORTED_MODULE_7__","_components_posts__WEBPACK_IMPORTED_MODULE_8__","_tools__WEBPACK_IMPORTED_MODULE_9__","List","_ref","pageContext","posts","title","type","coords","coordinates","a","createElement","config","capitalize","width","alignSelf","margin","vertical","undefined","_","sample","cities","zoom","center","Consumer","size","columns","gatsby__WEBPACK_IMPORTED_MODULE_1__","grommet__WEBPACK_IMPORTED_MODULE_4__","Tags","tags","direction","wrap","gap","map","tag","key","onClick","navigate","toLowerCase","top","background","round","pad","horizontal","Card","cover","country","timeToRead","content","path","useContext","ResponsiveContext","react_default","Box","align","elevation","tools","to","gatsby_image_default","fluid","childImageSharp","Heading","level","left","Map","color","Text","Clock","Paragraph","Anchor","as","label","components_tags","Posts","length","slice","lenth","post","card","frontmatter","excerpt","ZoomPan","handleMapClick","geography","this","props","properties","NAME","filter","city","push","render","_this","_this$props","react_simple_maps__WEBPACK_IMPORTED_MODULE_3__","projectionConfig","scale","height","style","overflow","disablePanning","worldJson","geographies","projection","id","default","fill","stroke","strokeWidth","outline","hover","marker","transform","strokeLinecap","strokeMiterlimit","strokeLinejoin","d","cx","cy","Component","defaultProps"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAAK,EAAAC,GAAAE,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAAK,EAAAK,GAAAE,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAAAc,EAAAd,EAAA,KAAAe,EAAAf,EAAA,KAAAgB,EAAAhB,EAAA,KAyCeiB,UA5Bf,SAAAC,GAA+B,IAAfC,EAAeD,EAAfC,YACNC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KAChBC,EAASC,YAAYJ,GAC3B,OACEhB,EAAAqB,EAAAC,cAACd,EAAA,EAAD,CAAKS,MAAUM,IAAON,MAAZ,MAAuBO,YAAWP,IACrC,QAAJC,GACClB,EAAAqB,EAAAC,cAAClB,EAAA,EAAD,CAAKqB,MAAM,UAAUC,UAAU,SAASC,OAAQ,CAAEC,SAAQ,UAErCC,MAApBC,IAAEC,OAAOZ,IACRnB,EAAAqB,EAAAC,cAACb,EAAA,EAAD,CAAKuB,OAAQb,EAAQc,KAAM,EAAGC,OAAQJ,IAAEC,OAAOZ,GAAQC,eAI3DpB,EAAAqB,EAAAC,cAACjB,EAAA,EAAkB8B,SAAnB,KACG,SAAAC,GAAI,OACHpC,EAAAqB,EAAAC,cAACZ,EAAA,EAAD,CAAS2B,QAASD,GAAI,UACpBpC,EAAAqB,EAAAC,cAACX,EAAA,EAAD,CAAOK,MAAOA,2CC7B1B,IAAAjB,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAuC,EAAA1C,EAAA,KAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAA2C,EAAA3C,EAAA,KAyBe4C,IArBF,SAAA1B,GAAA,IAAG2B,EAAH3B,EAAG2B,KAAML,EAATtB,EAASsB,KAAT,OACXpC,EAAAqB,EAAAC,cAAClB,EAAA,EAAD,CACEuB,OAAQ,CAAEC,SAAQ,SAClBc,UAAU,iBACVC,MAAI,EACJC,IAAI,UAEHH,EAAKI,IAAI,SAAAC,GAAG,OACX9C,EAAAqB,EAAAC,cAACjB,EAAA,EAAD,CAAQ0C,IAAKD,EAAKE,QAAS,kBAAMC,YAAQ,QAASH,EAAII,iBACpDlD,EAAAqB,EAAAC,cAAClB,EAAA,EAAD,CACEuB,OAAQ,CAAEwB,IAAG,UACbC,WAAW,QACXC,MAAM,SACNC,IAAK,CAAEC,WAAU,WAEjBvD,EAAAqB,EAAAC,cAACiB,EAAA,EAAD,CAAMH,KAAMA,GAAOU,2KCuDdU,EA3DF,SAAA1C,GASP,IARJG,EAQIH,EARJG,MACAwC,EAOI3C,EAPJ2C,MACAhB,EAMI3B,EANJ2B,KACAiB,EAKI5C,EALJ4C,QACAC,EAII7C,EAJJ6C,WACAC,EAGI9C,EAHJ8C,QACAC,EAEI/C,EAFJ+C,KACA3C,EACIJ,EADJI,KAEMkB,EAAO0B,qBAAWC,KACxB,OACEC,EAAA3C,EAAAC,cAAC2C,EAAA,EAAD,CAAKxC,MAAM,SAASyC,MAAM,QAAQZ,IAAI,SACpCU,EAAA3C,EAAAC,cAAC2C,EAAA,EAAD,CAAKE,UAAU,QAAQd,MAAM,UAEjB,MAATI,GACCO,EAAA3C,EAAAC,cAAC8C,EAAA,EAAD,CAAcC,GAAIR,GAChBG,EAAA3C,EAAAC,cAACgD,EAAAjD,EAAD,CAAKkD,MAAOd,EAAMe,gBAAgBD,SAGtCP,EAAA3C,EAAAC,cAAC2C,EAAA,EAAD,CAAKtC,OAAQ,CAAEwB,IAAG,UAAcG,IAAK,CAAEC,WAAU,UAC/CS,EAAA3C,EAAAC,cAACmD,EAAA,EAAD,CAASC,MAAM,IAAI/C,OAAQ,CAAEC,SAAQ,UAClCX,GAEH+C,EAAA3C,EAAAC,cAAC2C,EAAA,EAAD,CACEvB,UAAU,MACVE,IAAI,SACJsB,MAAM,SACNvC,OAAQ,CAAEgD,KAAI,SAAYxB,IAAG,WAE7Ba,EAAA3C,EAAAC,cAACsD,EAAA,EAAD,CAAKC,MAAM,SAASzC,KAAK,WACzB4B,EAAA3C,EAAAC,cAACwD,EAAA,EAAD,CAAM1C,KAAK,SAASsB,GACpBM,EAAA3C,EAAAC,cAACyD,EAAA,EAAD,CAAOF,MAAM,SAASzC,KAAK,WAC3B4B,EAAA3C,EAAAC,cAACwD,EAAA,EAAD,CAAM1C,KAAK,SAASuB,EAApB,cAEG,UAAJzC,GACC8C,EAAA3C,EAAAC,cAAC0D,EAAA,EAAD,CAAWrD,OAAQ,CAAE4B,WAAU,UAC5BK,EACDI,EAAA3C,EAAAC,cAAC8C,EAAA,EAAD,CAAcC,GAAIR,GAChBG,EAAA3C,EAAAC,cAAC2D,EAAA,EAAD,CACEC,GAAG,OACHC,MAAM,aACN/C,KAAK,QACLyC,MAAM,gBAKT,UAAJzC,GACC4B,EAAA3C,EAAAC,cAAC2C,EAAA,EAAD,CAAKrB,IAAI,SAASF,UAAU,iBAAiBwB,MAAM,UACjDF,EAAA3C,EAAAC,cAAC8D,EAAA,EAAD,CAAMhD,KAAK,QAAQK,KAAMA,SCxBxB4C,IA7BD,SAAAvE,GAAe,IAAZE,EAAYF,EAAZE,MACF8C,qBAAWC,KACxB,GAAI/C,EAAMsE,OAAS,EACjB,OAAO,KAKT,OAAOtE,EACJuE,MAAM,EAAGvE,EAAMwE,OACf3C,IAAI,SAAA4C,GAAI,OACPzB,EAAA3C,EAAAC,cAACoE,EAAD,CACE3C,IAAK0C,EAAKE,YAAY1E,MACtBA,MAAOwE,EAAKE,YAAY1E,MACxBwC,MAAOgC,EAAKE,YAAYlC,MACxBhB,KAAMgD,EAAKE,YAAYlD,KACvBiB,QAAS+B,EAAKE,YAAYjC,QAC1BC,WAAY8B,EAAK9B,WACjBC,QAAS6B,EAAKG,QACd/B,KAAM4B,EAAKE,YAAY9B,KACvB3C,KAAMuE,EAAKE,YAAYzE,wGCjBzB2E,0LACJC,eAAA,SAAeC,GAAW,IAChB/D,EAAWgE,KAAKC,MAAhBjE,OAEF0B,EACJ,6BAAAqC,EAAUG,WAAWC,KAArB,MAEIJ,EAAUG,WAAWC,KACPnE,EAAOoE,OAAO,SAAAC,GAAI,OAAIA,EAAK3C,UAAYA,IAC3C4B,OAAS,GACvBgB,YAAI,gBAAiB5C,MAIzB6C,OAAA,WAAS,IAAAC,EAAAR,KAAAS,EAC0BT,KAAKC,MAA9BjE,EADDyE,EACCzE,OAAQE,EADTuE,EACSvE,OAAQD,EADjBwE,EACiBxE,KAExB,OACEjC,EAAAqB,EAAAC,cAAClB,EAAA,EAAD,KAEIJ,EAAAqB,EAAAC,cAACoF,EAAA,cAAD,CACAC,iBAAkB,CAChBC,MAAO,KAETnF,MAAO,KACPoF,OAAQ5E,EAAO,EAAI,IAAM,IACvB6E,MAAO,CACPrF,MAAK,OACLoF,OAAM,OACNE,SAAQ,WAGV/G,EAAAqB,EAAAC,cAACoF,EAAA,cAAD,CAAexE,OAAQA,EAAQD,KAAMA,EAAM+E,gBAAc,GACvDhH,EAAAqB,EAAAC,cAACoF,EAAA,YAAD,CAAaX,UAAWkB,GACrB,SAACC,EAAaC,GAAd,OACCD,EAAYrE,IACV,SAAAkD,GAAS,MACP,QAAAA,EAAUqB,IACRpH,EAAAqB,EAAAC,cAACoF,EAAA,UAAD,CACE3D,IAAKgD,EAAUG,WAAWC,KAC1BJ,UAAWA,EACXoB,WAAYA,EACZnE,QAAS,kBAAMwD,EAAKV,eAAeC,IACnCe,MAAO,CACLO,QAAS,CACPC,KAAI,UACJC,OAAM,UACNC,YAAa,IACbC,QAAO,QAETC,MAAO,CACLJ,KAAI,UACJC,OAAM,UACNC,YAAa,IACbC,QAAO,eAQvBzH,EAAAqB,EAAAC,cAACoF,EAAA,QAAD,KACG1E,EAAOa,IAAI,SAAA8E,GAAM,OAChB3H,EAAAqB,EAAAC,cAACoF,EAAA,OAAD,CACE3D,IAAK4E,EAAOvG,YACZuG,OAAQA,EACRb,MAAO,CACLO,QAAS,CAAEE,OAAM,aAGnBvH,EAAAqB,EAAAC,cAAA,KAAGsG,UAAU,uBACX5H,EAAAqB,EAAAC,cAAA,QACEgG,KAAK,OACLE,YAAY,IACZK,cAAc,SACdC,iBAAiB,KACjBC,eAAe,QACfC,EAAE,kEAEJhI,EAAAqB,EAAAC,cAAA,UACEgG,KAAK,OACLE,YAAY,IACZK,cAAc,SACdC,iBAAiB,KACjBC,eAAe,QACfE,GAAG,KACHC,GAAG,IACHrI,EAAE,kBAxFFsI,aAgHtBtC,EAAQuC,aAAe,CACrBlG,OAAQ,CAAC,EAAG,IACZD,KAAM,EACND,OAAQ,IAGK6D","file":"component---src-templates-list-jsx-ca1d23543a98bbe02c13.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport _ from \"lodash\"\nimport { Box, ResponsiveContext } from \"grommet\"\nimport config from \"../config\"\n\nimport App from \"../components/layout\"\nimport Map from \"../components/map\"\nimport Section from \"../components/section\"\nimport Posts from \"../components/posts\"\nimport { coordinates, capitalize } from \"../tools\"\n\n{/* FIXED: take app title from config.js */}\nfunction List({ pageContext }) {\n  const { posts, title, type } = pageContext\n  const coords = coordinates(posts)\n  return (\n    <App title={`${config.title} - ${capitalize(title)}`}>\n      {type !== `tag` && (\n        <Box width=\"xxlarge\" alignSelf=\"center\" margin={{ vertical: `small` }}>\n        {/* FIXED: only show map when at least one coordinate is set */}\n        {_.sample(coords) != undefined && (\n          <Map cities={coords} zoom={3} center={_.sample(coords).coordinates} />\n        )}\n        </Box>\n      )}\n      <ResponsiveContext.Consumer>\n        {size => (\n          <Section columns={size || `medium`}>\n            <Posts posts={posts} />\n          </Section>\n        )}\n      </ResponsiveContext.Consumer>\n    </App>\n  )\n}\n\nList.propTypes = {\n  pageContext: PropTypes.shape().isRequired,\n}\n\nexport default List\n","import React from \"react\"\nimport { navigate } from \"gatsby\"\nimport { Box, Button, Text } from \"grommet\"\n\nconst Tags = ({ tags, size }) => (\n  <Box\n    margin={{ vertical: `small` }}\n    direction=\"row-responsive\"\n    wrap\n    gap=\"xsmall\"\n  >\n    {tags.map(tag => (\n      <Button key={tag} onClick={() => navigate(`/tag/${tag.toLowerCase()}`)}>\n        <Box\n          margin={{ top: `xsmall` }}\n          background=\"brand\"\n          round=\"xsmall\"\n          pad={{ horizontal: `xsmall` }}\n        >\n          <Text size={size}>{tag}</Text>\n        </Box>\n      </Button>\n    ))}\n  </Box>\n)\nexport default Tags\n","import React, { useContext } from \"react\"\nimport {\n  ResponsiveContext,\n  Box,\n  Heading,\n  Paragraph,\n  Text,\n  Anchor,\n} from \"grommet\"\nimport { Clock, Map } from \"grommet-icons\"\nimport Img from \"gatsby-image\"\n\nimport Tags from \"./tags\"\nimport { InternalLink } from \"../tools\"\n\nconst Card = ({\n  title,\n  cover,\n  tags,\n  country,\n  timeToRead,\n  content,\n  path,\n  type,\n}) => {\n  const size = useContext(ResponsiveContext)\n  return (\n    <Box width=\"medium\" align=\"start\" pad=\"small\">\n      <Box elevation=\"small\" round=\"xsmall\">\n        {/* FIXED handle when no cover available */}\n        {cover != null && (\n          <InternalLink to={path}>\n            <Img fluid={cover.childImageSharp.fluid} />\n          </InternalLink>\n        )}\n        <Box margin={{ top: `xsmall` }} pad={{ horizontal: `small` }}>\n          <Heading level=\"3\" margin={{ vertical: `small` }}>\n            {title}\n          </Heading>\n          <Box\n            direction=\"row\"\n            gap=\"xsmall\"\n            align=\"center\"\n            margin={{ left: `xsmall`, top: `xsmall` }}\n          >\n            <Map color=\"dark-2\" size=\"medium\" />\n            <Text size=\"small\">{country}</Text>\n            <Clock color=\"dark-2\" size=\"medium\" />\n            <Text size=\"small\">{timeToRead} min read</Text>\n          </Box>\n          {type !== `photo` && (\n            <Paragraph margin={{ horizontal: `small` }}>\n              {content}\n              <InternalLink to={path}>\n                <Anchor\n                  as=\"span\"\n                  label=\" Read more\"\n                  size=\"small\"\n                  color=\"neutral-3\"\n                />\n              </InternalLink>\n            </Paragraph>\n          )}\n          {size !== `small` && (\n            <Box gap=\"xsmall\" direction=\"row-responsive\" align=\"center\">\n              <Tags size=\"small\" tags={tags} />\n            </Box>\n          )}\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default Card\n","import React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { ResponsiveContext } from \"grommet\"\n\nimport Card from \"./card\"\n\nconst SLICES = {\n  small: 2,\n  medium: 3,\n  large: 4,\n}\n\nconst Posts = ({ posts }) => {\n  const size = useContext(ResponsiveContext)\n  if (posts.length < 1) {\n    return null\n  }\n  const sliced = SLICES[size]\n\n  {/* FIXED use posts.length, not only one row */}\n  return posts\n    .slice(0, posts.lenth)\n    .map(post => (\n      <Card\n        key={post.frontmatter.title}\n        title={post.frontmatter.title}\n        cover={post.frontmatter.cover}\n        tags={post.frontmatter.tags}\n        country={post.frontmatter.country}\n        timeToRead={post.timeToRead}\n        content={post.excerpt}\n        path={post.frontmatter.path}\n        type={post.frontmatter.type}\n      />\n    ))\n}\n\nPosts.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n}\n\nexport default Posts\n","import React, { Component } from \"react\"\nimport { push } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport { Box } from \"grommet\"\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Markers,\n  Marker,\n} from \"react-simple-maps\"\n\nimport worldJson from \"../static/world-50m-simplified.json\"\n\nclass ZoomPan extends Component {\n  handleMapClick(geography) {\n    const { cities } = this.props\n    // TODO Temporary fix. Will need to create a mapping later\n    const country =\n      geography.properties.NAME === `United States of America`\n        ? `Usa`\n        : geography.properties.NAME\n    const destination = cities.filter(city => city.country === country)\n    if (destination.length > 0) {\n      push(`/destination/${country}`)\n    }\n  }\n\n  render() {\n    const { cities, center, zoom } = this.props\n\n    return (\n      <Box>\n          {/* FIXED style.overflow from visible to hidden, otherwise will overflow header */}\n          <ComposableMap\n          projectionConfig={{\n            scale: 320,\n          }}\n          width={1200}\n          height={zoom > 1 ? 500 : 900}\n            style={{\n            width: `100%`,\n            height: `auto`,\n            overflow: `hidden`, \n          }}\n        >\n          <ZoomableGroup center={center} zoom={zoom} disablePanning>\n            <Geographies geography={worldJson}>\n              {(geographies, projection) =>\n                geographies.map(\n                  geography =>\n                    geography.id !== `ATA` && (\n                      <Geography\n                        key={geography.properties.NAME}\n                        geography={geography}\n                        projection={projection}\n                        onClick={() => this.handleMapClick(geography)}\n                        style={{\n                          default: {\n                            fill: `#f0f0f0`,\n                            stroke: `#cdcdcd`,\n                            strokeWidth: 0.75,\n                            outline: `none`,\n                          },\n                          hover: {\n                            fill: `#828282`,\n                            stroke: `#cdcdcd`,\n                            strokeWidth: 0.75,\n                            outline: `none`,\n                          },\n                        }}\n                      />\n                    )\n                )\n              }\n            </Geographies>\n            <Markers>\n              {cities.map(marker => (\n                <Marker\n                  key={marker.coordinates}\n                  marker={marker}\n                  style={{\n                    default: { stroke: `#505050` },\n                  }}\n                >\n                  <g transform=\"translate(-12, -24)\">\n                    <path\n                      fill=\"none\"\n                      strokeWidth=\"3\"\n                      strokeLinecap=\"square\"\n                      strokeMiterlimit=\"10\"\n                      strokeLinejoin=\"miter\"\n                      d=\"M20,9c0,4.9-8,13-8,13S4,13.9,4,9c0-5.1,4.1-8,8-8S20,3.9,20,9z\"\n                    />\n                    <circle\n                      fill=\"none\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"square\"\n                      strokeMiterlimit=\"10\"\n                      strokeLinejoin=\"miter\"\n                      cx=\"12\"\n                      cy=\"9\"\n                      r=\"3\"\n                    />\n                  </g>\n                </Marker>\n              ))}\n            </Markers>\n          </ZoomableGroup>\n        </ComposableMap>\n      </Box>\n    )\n  }\n}\n\nZoomPan.propTypes = {\n  center: PropTypes.arrayOf(PropTypes.number),\n  zoom: PropTypes.number,\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      coordinates: PropTypes.arrayOf(PropTypes.number),\n      country: PropTypes.string,\n    })\n  ),\n}\n\nZoomPan.defaultProps = {\n  center: [0, 20],\n  zoom: 1,\n  cities: [],\n}\n\nexport default ZoomPan\n"],"sourceRoot":""}