{"version":3,"sources":["webpack:///./src/pages/typography.jsx","webpack:///./src/components/seo.jsx"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","grommet__WEBPACK_IMPORTED_MODULE_1__","grommet__WEBPACK_IMPORTED_MODULE_2__","styled_components__WEBPACK_IMPORTED_MODULE_3__","_config__WEBPACK_IMPORTED_MODULE_4__","_config__WEBPACK_IMPORTED_MODULE_4___default","_components_section__WEBPACK_IMPORTED_MODULE_5__","_components_seo__WEBPACK_IMPORTED_MODULE_6__","_components_layout__WEBPACK_IMPORTED_MODULE_7__","_tools__WEBPACK_IMPORTED_MODULE_8__","Toc","styled","div","withConfig","displayName","componentId","Typography","_ref","data","tableOfContents","markdownRemark","a","createElement","postImage","file","childImageSharp","fluid","src","postData","frontmatter","title","config","path","width","justify","direction","pad","alignSelf","margin","align","elevation","renderAst","htmlAst","level","border","dangerouslySetInnerHTML","__html","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","_config__WEBPACK_IMPORTED_MODULE_2__","_config__WEBPACK_IMPORTED_MODULE_2___default","SEO","_ref2","isBlogPost","postMeta","description","excerpt","image","url","schemaOrgJSONLD","@context","@type","name","alternateName","push","itemListElement","position","item","@id","headline","author","titleShort","mainEntityOfPage","getSchemaOrgJSONLD","content","lang","amp","type","JSON","stringify","rel","href","property","twitter","defaultProps"],"mappings":"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","file":"component---src-pages-typography-jsx-66711a112fba431d83d2.js","sourcesContent":["import React, { Fragment } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\nimport { Box, Heading } from \"grommet\"\nimport styled from \"styled-components\"\nimport config from \"../config\"\n\nimport Section from \"../components/section\"\nimport Seo from \"../components/seo\"\nimport App from \"../components/layout\"\nimport { renderAst } from \"../tools\"\n\nconst Toc = styled.div`\n  word-wrap: break-word;\n\n  ul {\n    margin: 0;\n    list-style-type: none;\n    padding-left: 1em;\n  }\n\n  li {\n    padding: 2px;\n  }\n  a {\n    color: rgba(0, 0, 0, 0.54);\n    text-decoration: none;\n  }\n  a:hover {\n    color: black;\n  }\n`\n\n{/* FIXED: take SEO title from config.js */}\nfunction Typography({ data }) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { tableOfContents } = markdownRemark\n\n  return (\n    <Fragment>\n      <Seo\n        postImage={data.file.childImageSharp.fluid.src}\n        postData={{\n          frontmatter: {\n            title: `Typography - ${config.title}`,\n            path: `/typography`,\n          },\n        }}\n      />\n      <App title=\"Typography\">\n        <Section>\n        <Box\n          width=\"xxlarge\"\n          justify=\"around\"\n          direction=\"row-responsive\"\n          pad=\"small\"\n          alignSelf=\"center\"\n          margin=\"small\"\n        >\n          <Box\n            pad=\"medium\"\n            align=\"center\"\n            elevation=\"medium\"\n            margin=\"small\"\n          >\n            {renderAst(data.markdownRemark.htmlAst)}\n          </Box>\n          <Box\n            width=\"large\"\n            elevation=\"small\"\n            pad=\"large\"\n            margin=\"small\"\n          >\n            <Heading level=\"4\" border=\"5\">Contents</Heading>\n            <Toc\n              margin=\"xsmall\"\n              border=\"1\"\n              dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n          </Box>\n        </Box>\n        </Section>\n      </App>\n    </Fragment>\n  )\n}\n\n{/* FIXED use me.jpg instead of up.jpg */}\n{/* FIXED use GatsbyImageSharpFluid_withWebp */}\nexport const pageQuery = graphql`\n  query TypographyQuery {\n    file(relativePath: { eq: \"about/me.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 800, quality: 100) {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n    markdownRemark(frontmatter: { path: { eq: \"/typography\" } }) {\n      htmlAst\n      frontmatter {\n        path\n      }\n      tableOfContents(pathToSlugField: \"frontmatter.path\")\n\n    }\n  }\n`\n\nTypography.propTypes = {\n  data: PropTypes.shape().isRequired,\n}\n\nexport default Typography\n","import React from \"react\"\nimport Helmet from \"react-helmet\"\nimport PropTypes from \"prop-types\"\nimport config from \"../config\"\n\nconst getSchemaOrgJSONLD = ({ url, title, image, description, isBlogPost }) => {\n  const schemaOrgJSONLD = [\n    {\n      \"@context\": `http://schema.org`,\n      \"@type\": `WebSite`,\n      url,\n      name: title,\n      alternateName: config.title,\n    },\n  ]\n  if (isBlogPost) {\n    schemaOrgJSONLD.push([\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BreadcrumbList`,\n        itemListElement: [\n          {\n            \"@type\": `ListItem`,\n            position: 1,\n            item: {\n              \"@id\": url,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BlogPosting`,\n        url,\n        name: title,\n        alternateName: config.title,\n        headline: title,\n        image: {\n          \"@type\": `ImageObject`,\n          url: image,\n        },\n        description,\n        author: {\n          \"@type\": `Person`,\n          name: config.titleShort,\n        },\n        mainEntityOfPage: {\n          \"@type\": `WebSite`,\n          \"@id\": config.url,\n        },\n      },\n    ])\n  }\n  return schemaOrgJSONLD\n}\n\nconst SEO = ({ postData, postImage, isBlogPost }) => {\n  const postMeta = postData.frontmatter || {}\n\n  const title = postMeta.title || config.title\n  const description = postData.excerpt || config.description\n  const image = `${config.url}${postImage}`\n  const url = postMeta.path ? `${config.url}${postMeta.path}` : config.url\n\n  const schemaOrgJSONLD = getSchemaOrgJSONLD({\n    url,\n    title,\n    image,\n    description,\n    isBlogPost,\n  })\n\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n      <title>{title}</title>\n      <meta name=\"theme-color\" content=\"#EEEEEE\" />\n      <html lang=\"en\" amp />\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* Google webmaster */}\n      {url === config.url && (\n        <meta\n          name=\"google-site-verification\"\n          content=\"YUxxWy9eAbuiQ86l-TiUk1SvM5hAnrtNBf6qA9uwFXk\"\n        />\n      )}\n      <link rel=\"manifest\" href=\"/manifest.webmanifest\" />\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={url} />\n      <meta property=\"og:type\" content=\"article\" />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={config.twitter} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  )\n}\n\nSEO.propTypes = {\n  isBlogPost: PropTypes.bool,\n  postData: PropTypes.shape({\n    frontmatter: PropTypes.any,\n    excerpt: PropTypes.any,\n  }),\n  postImage: PropTypes.string,\n}\n\nSEO.defaultProps = {\n  postImage: null,\n  isBlogPost: false,\n  postData: {},\n}\n\nexport default SEO\n"],"sourceRoot":""}