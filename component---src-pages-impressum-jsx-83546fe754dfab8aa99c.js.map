{"version":3,"sources":["webpack:///./src/pages/impressum.jsx","webpack:///./src/components/seo.jsx"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","grommet__WEBPACK_IMPORTED_MODULE_1__","_components_section__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","_components_layout__WEBPACK_IMPORTED_MODULE_5__","_tools__WEBPACK_IMPORTED_MODULE_6__","Impressum","_ref","data","a","createElement","postImage","file","childImageSharp","fluid","src","postData","frontmatter","title","path","margin","horizontal","vertical","pad","align","elevation","renderAst","markdownRemark","htmlAst","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","_config__WEBPACK_IMPORTED_MODULE_2__","_config__WEBPACK_IMPORTED_MODULE_2___default","SEO","_ref2","isBlogPost","postMeta","config","description","excerpt","image","url","schemaOrgJSONLD","@context","@type","name","alternateName","push","itemListElement","position","item","@id","headline","author","titleShort","mainEntityOfPage","getSchemaOrgJSONLD","content","lang","amp","type","JSON","stringify","rel","href","property","twitter","defaultProps"],"mappings":"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","file":"component---src-pages-impressum-jsx-83546fe754dfab8aa99c.js","sourcesContent":["import React, { Fragment } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\nimport { Box } from \"grommet\"\nimport config from \"../config\"\n\nimport Section from \"../components/section\"\nimport Seo from \"../components/seo\"\nimport App from \"../components/layout\"\nimport { renderAst } from \"../tools\"\n\n{/* FIXED: replace SEO title with config.title */}\nfunction Impressum({ data }) {\n  return (\n    <Fragment>\n      <Seo\n        postImage={data.file.childImageSharp.fluid.src}\n        postData={{\n          frontmatter: {\n            title: \"`Impressum - ` {config.title}\",\n            path: `/about/impressum`,\n          },\n        }}\n      />\n      <App title=\"Impressum\">\n        <Section>\n          <Box\n            margin={{ horizontal: `xlarge`, vertical: `small` }}\n            pad=\"medium\"\n            align=\"center\"\n            elevation=\"medium\"\n          >\n            {renderAst(data.markdownRemark.htmlAst)}\n          </Box>\n        </Section>\n      </App>\n    </Fragment>\n  )\n}\n\n{/* FIXED use me.jpg instead of up.jpg */}\n{/* FIXED use GatsbyImageSharpFluid_withWebp */}\nexport const pageQuery = graphql`\n  query ImpressumQuery {\n    file(relativePath: { eq: \"about/me.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 800, quality: 100) {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n    markdownRemark(frontmatter: { path: { eq: \"/about/impressum\" } }) {\n      htmlAst\n      frontmatter {\n        path\n      }\n    }\n  }\n`\n\nImpressum.propTypes = {\n  data: PropTypes.shape().isRequired,\n}\n\nexport default Impressum\n","import React from \"react\"\nimport Helmet from \"react-helmet\"\nimport PropTypes from \"prop-types\"\nimport config from \"../config\"\n\nconst getSchemaOrgJSONLD = ({ url, title, image, description, isBlogPost }) => {\n  const schemaOrgJSONLD = [\n    {\n      \"@context\": `http://schema.org`,\n      \"@type\": `WebSite`,\n      url,\n      name: title,\n      alternateName: config.title,\n    },\n  ]\n  if (isBlogPost) {\n    schemaOrgJSONLD.push([\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BreadcrumbList`,\n        itemListElement: [\n          {\n            \"@type\": `ListItem`,\n            position: 1,\n            item: {\n              \"@id\": url,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BlogPosting`,\n        url,\n        name: title,\n        alternateName: config.title,\n        headline: title,\n        image: {\n          \"@type\": `ImageObject`,\n          url: image,\n        },\n        description,\n        author: {\n          \"@type\": `Person`,\n          name: config.titleShort,\n        },\n        mainEntityOfPage: {\n          \"@type\": `WebSite`,\n          \"@id\": config.url,\n        },\n      },\n    ])\n  }\n  return schemaOrgJSONLD\n}\n\nconst SEO = ({ postData, postImage, isBlogPost }) => {\n  const postMeta = postData.frontmatter || {}\n\n  const title = postMeta.title || config.title\n  const description = postData.excerpt || config.description\n  const image = `${config.url}${postImage}`\n  const url = postMeta.path ? `${config.url}${postMeta.path}` : config.url\n\n  const schemaOrgJSONLD = getSchemaOrgJSONLD({\n    url,\n    title,\n    image,\n    description,\n    isBlogPost,\n  })\n\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n      <title>{title}</title>\n      <meta name=\"theme-color\" content=\"#EEEEEE\" />\n      <html lang=\"en\" amp />\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* Google webmaster */}\n      {url === config.url && (\n        <meta\n          name=\"google-site-verification\"\n          content=\"YUxxWy9eAbuiQ86l-TiUk1SvM5hAnrtNBf6qA9uwFXk\"\n        />\n      )}\n      <link rel=\"manifest\" href=\"/manifest.webmanifest\" />\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={url} />\n      <meta property=\"og:type\" content=\"article\" />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={config.twitter} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  )\n}\n\nSEO.propTypes = {\n  isBlogPost: PropTypes.bool,\n  postData: PropTypes.shape({\n    frontmatter: PropTypes.any,\n    excerpt: PropTypes.any,\n  }),\n  postImage: PropTypes.string,\n}\n\nSEO.defaultProps = {\n  postImage: null,\n  isBlogPost: false,\n  postData: {},\n}\n\nexport default SEO\n"],"sourceRoot":""}